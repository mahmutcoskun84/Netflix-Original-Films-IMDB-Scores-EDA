# -*- coding: utf-8 -*-
"""Proje2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jkcpy71TdAEh-FdhGKXCMIv9a8z5mkXI
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

data= pd.read_csv('/content/drive/MyDrive/Colab Notebooks/NetflixOriginals.csv',encoding = "ISO-8859-1")

data.shape

data.size

data.describe().T

data.dtypes

data.isnull().sum()

data.columns



#1-Veri setine göre uzun soluklu filmler hangi dilde oluşturulmuştur?

runtime_mean_value=data["Runtime"].mean()

df=data[data["Runtime"]>runtime_mean_value]     

df=df.groupby("Language").count().sort_values(by="Runtime",ascending=False)

df=df.rename(columns={"Runtime":"Number_of_Films"})
df=df.reset_index()

df[["Language","Number_of_Films"]]

df.plot (kind='bar', x ="Language" , y ="Number_of_Films" )

plt.show()

data[data.Genre=="Documentary"]

data[data.Genre=="Documentary"].Premiere.value_counts()

data['Premiere']=pd.to_datetime(data['Premiere'])

data.dtypes

#3-İngilizce çekilen filmler içerisinde hangi tür en yüksek IMDB puanına sahiptir?

data.rename(columns={"IMDB Score":"IMDB_Score"}, inplace=True)   #IMDB Score rename

data[data.Language=="English"].sort_values(by="IMDB_Score",ascending=False)[["Title","Genre","IMDB_Score","Language"]]

#4-'Hindi' Dilinde çekilmiş olan filmlerin ortalama 'runtime' suresi nedir?

data[data.Language=="Hindi"].Runtime.mean()

#5-'Genre' Sütunu kaç kategoriye sahiptir? Görselleştirerek ifade ediniz.
data["Genre"].nunique()

data["Genre"].unique()

Genre_counts= data["Genre"].value_counts()

fig = plt.figure(figsize = (200, 30))
# creating the bar plot
plt.bar(data["Genre"].unique(), Genre_counts )
 
plt.xlabel("Genre", )
plt.ylabel("Genre counts")
plt.title("Genre types")
plt.show()

#6-Veri setinde bulunan filmlerde en çok kullanılan 3 dili bulunuz.

data["Language"].value_counts().head(3).reset_index()

data[["Title","IMDB_Score"]].sort_values(by="IMDB_Score",ascending=False).head(10)

#7-IMDB puanı en yüksek olan ilk 10 film hangileridir?

data.loc[:,["Title","IMDB_Score"]].sort_values(by="IMDB_Score",ascending=False).head(10)

#2-2019 Ocak ile 2020 Haziran tarihleri arasında 'Documentary' türünde çekilmiş filmlerin IMDB değerlerini bulup görselleştiriniz.

Documantary_IMDB_Score=data[(data.Premiere>"2019-01-01")&(data.Premiere<"2020-06-01")&(data.Genre=="Documentary")] [["Title","Genre","Premiere","IMDB_Score"]]
Documantary_IMDB_Score

Documantary_IMDB_Score["IMDB_Score"].plot(kind = 'hist',title='IMDB Scores')

data.groupby("Genre").count().loc[:,"Title"].reset_index()

data["Genre"].value_counts().reset_index()

#8-IMDB puanı ile 'Runtime' arasında nasıl bir korelasyon vardır? İnceleyip görselleştiriniz.

corelasyon=data[["Runtime","IMDB_Score"]]

data.corr()

corr=np.round(corelasyon.corr(),2)
fig, ax = plt.subplots(figsize = (15, 10))
 
sns.heatmap(ax = ax, \
            data = corelasyon, \
            annot = True, \
            cmap = "coolwarm", \
            )
 
ax.set_title("Korelasyon Matrisi Grafiği")
 
plt.show()

#9-IMDB Puanı en yüksek olan ilk 10 'Genre' hangileridir? Görselleştiriniz.

top_ten_genre=data[["Genre","IMDB_Score"]].sort_values(by="IMDB_Score",ascending=False).head(10)
top_ten_genre

top_ten_genre.plot( kind='bar',x = 'Genre', y = 'IMDB_Score',title="Top Ten IMDB Score")



plt.xlabel("Genre")
plt.ylabel("IMDB Score")
plt.show()

#10-'Runtime' değeri en yüksek olan ilk 10 film hangileridir? Görselleştiriniz.

top_ten_runtime=data[["Title","Runtime"]].sort_values(by="Runtime",ascending=False).head(10)
top_ten_runtime

top_ten_runtime.plot( kind='bar',x = 'Title', y = 'Runtime',title="Top Ten Runtime")

plt.xlabel("Title")
plt.ylabel("Runtime")
plt.show()

#11-Hangi yılda en fazla film yayımlanmıştır? Görselleştiriniz

year=data.Premiere.dt.year

df=data.groupby(year).count()["Title"].sort_values(ascending=False).reset_index()

df

df=df.rename(columns={'Premiere':"Year", 'Title': "Number_of_Title" })
pd.DataFrame(df)

df.plot( kind='bar',x ="Year", y = 'Number_of_Title',title="Number of films in years")
plt.xlabel("Premiere Year")
plt.ylabel("Number of Film")
plt.show()

#12-Hangi dilde yayımlanan filmler en düşük ortalama IMBD puanına sahiptir? Görselleştiriniz
avg_IMDB_score=data.groupby("Language")["IMDB_Score"].mean().sort_values().reset_index()
avg_IMDB_score=avg_IMDB_score.rename(columns={"Language":"Title_Language","IMDB_Score":"Average_IMDB_Score"})

avg_IMDB_score

avg_IMDB_score.plot( kind='bar',x ='Title_Language', y = 'Average_IMDB_Score',title="Average IMDB Score for Film Language")

plt.rcParams['figure.dpi'] = 200
#plt.rcParams['savefig.dpi'] = 100

plt.xlabel("Title Language")
plt.ylabel("Average IMDB Score")
plt.show()

#13-Hangi yılın toplam "runtime" süresi en fazladır?

years =data.Premiere.dt.year
data.groupby(years).sum()["Runtime"].sort_values(ascending=False).reset_index()

#14-Her bir dilin en fazla kullanıldığı "Genre" nedir?
languageandgenre=data.groupby(["Language","Genre"])[["Genre"]].count()

languageandgenre

#15-Veri setinde outlier veri var mıdır? Açıklayınız.
data.select_dtypes(include=["float64","int64"])

data_table1=data["Runtime"].copy()

sns.boxplot(x=data_table1) # outliers for Runtime

data_table2= data["IMDB_Score"].copy()
sns.boxplot(x=data_table2) #outliers for IMDB Score

#outliers

Q1=data_table1.quantile(0.25)
Q3=data_table1.quantile(0.75)

IQR=Q3-Q1

lower_band=Q3-1.5*IQR
upper_band=Q1+1.5*IQR


print("Q1:"+str(Q1)+ " " + "Q3:"+str(Q3))

print("Lowerband:"+ str(lower_band)+ " " + "Upperband:"+str(upper_band))

data_table1.mean()

outliers_vector=(data_table1< (lower_band)) | (data_table1> (upper_band))

outliers=data[outliers_vector]

outliers.index

Q1=data_table2.quantile(0.25)
Q3=data_table2.quantile(0.75)
IQR=Q3-Q1

lower_band=Q3-1.5*IQR
upper_band=Q1+1.5*IQR


print("Q1:"+str(Q1)+ " " + "Q3:"+str(Q3))

print("Lowerband:"+ str(lower_band)+ " " + "Upperband:"+str(upper_band))

data[(data_table1< (lower_band)) | (data_table1> (upper_band))]["IMDB_Score"]

outliers_vector=(data_table1< (lower_band)) | (data_table1> (upper_band))

outliers=data[outliers_vector]

outliers.index